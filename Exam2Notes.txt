Applications of Stacks
    - functions are run by a stack 
    - runtime stack
        - where are variables stored?
            - stack (everything else)
            - heap (new)
            - global (static)
    - math is a stack   
        - specifically post fix uses a stack (23+ instead of 2+3)
            - evaluating post-fix
                - scan left to right:
                    if its a number
                        push
                    if operator
                        pop B
                        pop A 
                        push (A op B)
Queue
    - tis like an tube 
    - put stuff in back and remove stuff from front 
    _____________________
   |                     |
    ---------------------

    - add stuff: enqueue
    - remove stuff: dequeue
    - getFront
    - isFull
    - isEmpty
    - size
    - makeEmpty 

    - using an array
        - basically position 0 is the front, and the highet position is the back
        - once you dequeue something, just move where the front variable is 
        - if you run over the end, you basically just requeue over stuff you dequeued already 
            - think of this like a donut shaped array 
            
Operating System 
    - a program or set of programs that manages resources for the computer
        - software packages
        - memory management:
            - virtual memory/paging: thomas makes each program think it has infinite memory available to it
            - paging: finite memory available to them, but pages are given and taken away based on how you need them 
                - certain set of pages that are part of your virtual memory, you can only write on those pages 
                - this makes sure you don't write on someone elses program while its running 
        - storage (disk) management 
        - security/protection  
            - you cant change someones program while its running 
        - CPU management: who gets what memory/time
            - in fact only one programming is running at once, but they switch so quickly that we think multiple things are running at once
        - process management - giving processes CPU time
            - process: program in execution
                - has a user, memory allocated to it, CPU allocated to it
    - parts of an operating system
        - application software: stuff you can remove and the computer is still useful (i.e. photoshop, word, etc.)
        - system software: stuff that does vital stuff like print
        - kernel: the most important part of the operating system that manages all the stuff above
        - device drivers: piece of software that translates between the operating system and the device
        - device controller: controls the device and drivers

Linked List
    - another way to implement a stack
    - works like a list in python in that it is a series of boxes that are connected by pointers, the last box has a null pointer
        - head pointer tells us where to start --- with a stack this is just called the top
    - push:
        1. make new node
        2. put D in data part of node 
        3. point from D to top (aka C node)
        4. move top pointer to point at D
    - pop:
        1. copy old top and save 
        2. move top to one below 
        3. return old top
Local Area Network (LAN)
    - ethernet 
        - bus-style broadcast network 
    - sections are connected using 
        - switch (smart)
            - pass relevant stuff not everything 
            - also only passes to the relevant locations 
        - hub/repeater/bridges (dumb)
            - repeat everything 
    - router
        - contains CPU and can filter packets of information
        - can program router to block specific stuff like facebook or another website
        - also does all the stuff a switch does 

Recursion
    - when a function calls itself 
    - 4 rules of recursion 
        1. have a base case
        2. converge to a base case
        3. trust that recursion works
        4. avoid repeated work
Dynamic Programming: using an array to store fucntion values to avoid repeated work
    - usually the array is filled from 0 

Sorting Algorithms 
- 6 major ones:
    - selection sort: minimizes data moves
        -basic idea: looks for max item and move to the end (could also do with minimim and put in front)
        Example:
            81726354
            41726358
            41526378
            41523678
            41325678
            21345678
            12345678
        - running time: O(n^2)
        - data moves: O(n)
    - bubble sort: horrible, know how bad so you know to get rid of it 
        - basic idea: look for stuff thats out of order and swap them
        Example:
            81726354... would compare 8 to 1 and swap then 8 to 7 and swap, etc.
            17263548
            12635478
            12354678
            12345678
        - running time: O(n^2) -- constants are worse with this than selection
        - data moves: O(n^2)
    - insertion sort: good on nearly-sorted data
        - basic idea: insert into an already-sorted portion of the array 
        Example:
            81726354
            18726354
            17826354
            12786354
            12678354
            12367854
            12356784
            12345678
        - running time: O(n^2) -- can be linear if its almost sorted
    - shell sort: fast and based on insertion sort  
        - basic idea: sort subsequences of the array defined by offsets and gaps
            - leverage insertion sort
         Example:
            25 1 24 2   23 3 22 4 21 5  20 6  19  7 18  8 17  9 16 10 15 11 14 12 13
                - gap size 5: (25,3,20,8,15)(1,22,6,17,11)(24,4,19,9,14)(2,21,7,16,12)(23,5,18,10,13)
                - we will sort each of these subsets in place
                - first offset of 0, second ofset of  1, third ofset of 2...etc until often of 5
            3 1  4  2   5  8  6 9  7 10 15 11 14 12 13 20 17 19 16 18 25 22 24 21 23 -- gap 5
                - gap size 3: (3,2,6,10,14,20,16,22,23)(1,5,9,9,15,12,17,18,24)(4,8,7,11,13,19,25,21)
            2 1  4  3   5  7  6 9  8 10 12 11 14 15 13 16 17 19 20 18 21 22 24 25 22
                - gap 1: this is the same as insertion sort 
        - running time: O(n(log n)^2)
        - gap = gap/2.2(experimental)
    - quicksort: recursive, optimal on average
        - basic idea: recursively divide and conquer
        - steps: 
            1.choose a pivot item
            2.divide into big and small based on the pivot item 
            3. end with 3 groups: <pivot, pivot, >pivot
            4. recursively sort the left half, then recursively sort the right half 
        Example: 
            81726354 - 4 is the pivot point
            compare 8 to 4... 8 should be in the right region
            compare 8 to 1... 1 is wrong compared to the 8 and the 4 so swap 1 and 8
            18726354
            now 1 and 8 are partitioned 
            compare 7 to 4... leave there, its good relative to the 4
            compare 2 to 4... wrong, swap with 8
            12786354
            now 1&2 are left of pivot and 7&8 are right of the pivot
            continue to follow this patern until are in the right place as compared to the pivot
            12346758 -- this version is the final version before the recursive call
        - running time: 
            - average case: O(nlogn)
            - worst case: O(n^2)
    - mergesort: recursive, optimal, needs extra space 
        - basic idea: sort each half, then merge (recursive divide and conquer)
        Example: 
            81726354
            8172  6356
            1278  3456
            12345678 
        - running time: O(nlogn)
            - merge: 9n+5


Programming Languages:
    - programming paradigms (ways of thinking about writing code)
        - functional: the basic unit you write in is functions, also no variables
            - LISP, ML, and Scheme
        - object oriented
            - Smalltalk, JAVA, C++
            - originated with the MacBook
        - imperative
            - what machine languages use
            - FORTRAN, COBOL, BASIC, C, and APL, Pascal, Assembler
        - declarative 
            - prolog, [SQL]
        - parallel/concurrent 
            - no good language for this (C++/MPI is used in parallel at Butler)

    - compiler theory (the steps a programmer goes through to translate to a computer)
        - source program --> lexical analyzer (produces a token stream) --> parser(checks for grammar and semantics constructs a data structre) --> code generator (tree treversal to construct assembly code) --> code optimizer --> object program

        1. lexical analysis(Scanner): produces a token stream
        2. syntax analysis(Parser): checks the tokens against the grammar
        3. semantic analysis(Parser): checks for meaning/types
        4. code generation
        5. code optimization: will not effect bigO but it could effect the constants 